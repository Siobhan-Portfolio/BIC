{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/home/siobhan/git/personal/BIC/BICCW2/BIC/src/main.js"
  ],
  "names": [],
  "mappings": "AAAA;;;;;;;;ACKA,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;AAEtC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAS,MAAM,EAAE;AACtC,QAAM,CAAC,SAAS,GAAE,MAAM,CAAC;AACzB,QAAM,CAAC,QAAQ,GAAE,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6B3B,MAAI,YAAY,GAAG,SAAf,YAAY,CAAY,CAAC,EAAC;AAC5B,QAAG,CAAC,IAAE,CAAC,EAAC;AACN,aAAO,CAAC,CAAC;KACV,MACG;AACF,aAAO,CAAC,CAAC,CAAC;KACX;GACF,CAAA;;AAED,QAAM,CAAC,MAAM,GAAG,EAAE,CAAC;AACnB,QAAM,CAAC,OAAO,GAAG,EAAE,CAAC;AACpB,QAAM,CAAC,GAAG,GAAG,CAAC,CAAC;AACf,MAAI,UAAU,GAAG,SAAb,UAAU,CAAY,KAAK,EAAE,OAAO,EAAC;;AAEzC,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,KAAC,GAAG,KAAK,CAAC;AACV,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,KAAC,GAAG,OAAO,CAAC;;AAEZ,QAAI,GAAG,GAAG,CAAC,CAAC;;AAEZ,SAAK,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACvC,SAAG,GAAG,GAAG,GAAI,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,AAAC,CAAC;KACxB,CAAC;;AAEF,QAAI,CAAC,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;GAE/B,CAAA;;AAED,MAAI,IAAI,GAAG,CAAC,CAAC,CAAC,EAAC,CAAC,GAAG,EAAC,GAAG,EAAC,CAAC,CAAC,CAAC;;AAG3B,QAAM,CAAC,KAAK,GAAG,YAAU;AACxB,UAAM,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;AACpC,WAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;GACjC,CAAA;CAGA,CAAC,CAAC",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\n/******************************************************************************************\n                                         Angular Overhead\n*******************************************************************************************/\n\nvar app = angular.module('myApp', []);\n\napp.controller('myCtrl', function($scope) {\n    $scope.firstName= \"John\";\n    $scope.lastName= \"Doe\";\n\n\n/******************************************************************************************\n                                         Perceptron\n*******************************************************************************************/\n\n\n/****************************************\n * Input Variables:\n *   + Inputs Vector             phi(x)\n *     - Weights                 w\n *     - Input Values            x\n *     - SourceID                NodeID\n *\n *   + Bias                      b\n *\n * Node Variables:\n *  + Summing Function           SUM()\n *  + Activation Function        f(sum)\n *  + NodeID                     NodeID\n *\n * Output Variables:\n *   + Output Vector\n *     - Destination Node\n *     - Output Values\n *   + Error\n****************************************/\n\nvar stepFunction = function(i){\n  if(i>=0){\n    return 1;\n  }\n  else{\n    return -1;\n  }\n}\n\n$scope.values = [];\n$scope.weights = [];\n$scope.sum = 0;\nvar perceptron = function(input, weights){\n\nvar x = [];\nx = input;\nvar w = [];\nw = weights;\n\nvar sum = 0;\n\nfor (var i = x.length - 1; i >= 0; i--) {\n\tsum = sum + (w[i]*x[i]);\n};\n\nthis.output = stepFunction(sum);\n\n}\n\nvar data = [-1,-0.5,0.5,1];\n\n\n$scope.print = function(){\n\t$scope.pTest = new perceptron(data);\n\tconsole.log($scope.pTest.output);\n}\n\n\n});"
  ]
}