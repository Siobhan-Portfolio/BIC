{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/home/siobhan/git/personal/BIC/BICCW2/BIC/src/main.js"
  ],
  "names": [],
  "mappings": "AAAA;;;;;;;;ACKA,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;AAEtC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAS,MAAM,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsC1C,MAAI,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,GAAG,EAAI,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,EAAC,CAAC,IAAI,EAAG,IAAI,CAAC,CAAC,CAAC;AACvziE,MAAI,SAAS,GAAG,CAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AACrhE,MAAI,SAAS,GAAG,CAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,MAAM,EAAC,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,EAAC,CAAC,MAAM,EAAK,MAAM,CAAC,CAAC,CAAC;;;;;;;AAOxhE,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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\n/******************************************************************************************\n                                         Angular Overhead\n*******************************************************************************************/\n\nvar app = angular.module('myApp', []);\n\napp.controller('myCtrl', function($scope) {\n\n\n\n\n\n/******************************************************************************************\n                                         Perceptron\n*******************************************************************************************/\n\n\n/****************************************\n * Input Variables:\n *   + Inputs Vector             phi(x)\n *     - Weights                 w\n *     - Input Values            x\n *     - SourceID                NodeID\n *\n *   + Bias                      b\n *\n * Node Variables:\n *  + Summing Function           SUM()\n *  + Activation Function        f(sum)\n *  + NodeID                     NodeID\n *\n * Output Variables:\n *   + Output Vector\n *     - Destination Node\n *     - Output Values\n *   + Error\n****************************************/\n\n\n/**************************************\n\n    This is all test data please ignore.\n\n***************************************/\nvar linear_data = [[-1, -1 ],[-0.98,   -0.98],[-0.96,   -0.96],[-0.94,   -0.94],[-0.92,   -0.92],[-0.9 , -0.9],[-0.88,   -0.88],[-0.86,   -0.86],[-0.84,   -0.84],[-0.82,   -0.82],[-0.8 , -0.8],[-0.78,   -0.78],[-0.76,   -0.76],[-0.74,   -0.74],[-0.72,   -0.72],[-0.7 , -0.7],[-0.68,   -0.68],[-0.66,   -0.66],[-0.64,   -0.64],[-0.62,   -0.62],[-0.6 , -0.6],[-0.58,   -0.58],[-0.56,   -0.56],[-0.54,   -0.54],[-0.52,   -0.52],[-0.5 , -0.5],[-0.48,   -0.48],[-0.46,   -0.46],[-0.44,   -0.44],[-0.42,   -0.42],[-0.4 , -0.4],[-0.38,   -0.38],[-0.36,   -0.36],[-0.34,   -0.34],[-0.32,   -0.32],[-0.3 , -0.3],[-0.28,   -0.28],[-0.26,   -0.26],[-0.24,   -0.24],[-0.22,   -0.22],[-0.2 , -0.2],[-0.18,   -0.18],[-0.16,   -0.16],[-0.14,   -0.14],[-0.12,   -0.12],[-0.1,   -0.1],[-0.08, -0.08],[-0.06, -0.06],[-0.04, -0.04],[-0.02, -0.02],[0, 0],[0.02,  0.02],[0.04,  0.04],[0.06,  0.06],[0.08,  0.08],[0.1, 0.1],[0.12,  0.12],[0.14,  0.14],[0.16,  0.16],[0.18,  0.18],[0.2, 0.2],[0.22,  0.22],[0.24,  0.24],[0.26,  0.26],[0.28,  0.28],[0.3, 0.3],[0.32,  0.32],[0.34,  0.34],[0.36,  0.36],[0.38,  0.38],[0.4, 0.4],[0.42,  0.42],[0.44,  0.44],[0.46,  0.46],[0.48,  0.48],[0.5, 0.5],[0.52,  0.52],[0.54,  0.54],[0.56,  0.56],[0.58,  0.58],[0.6, 0.6],[0.62,  0.62],[0.64,  0.64],[0.66,  0.66],[0.68,  0.68],[0.7, 0.7],[0.72,  0.72],[0.74,  0.74],[0.76,  0.76],[0.78,  0.78],[0.8, 0.8],[0.82,  0.82],[0.84,  0.84],[0.86,  0.86],[0.88,  0.88],[0.9, 0.9],[0.92,  0.92],[0.94,  0.94],[0.96,  0.96],[0.98,  0.98]];\nvar cubic_data = [[-1.0000,   -1.0000],[-0.9800,   -0.9412],[-0.9600,   -0.8847],[-0.9400,   -0.8306],[-0.9200,   -0.7787],[-0.9000,   -0.7290],[-0.8800,   -0.6815],[-0.8600,   -0.6361],[-0.8400,   -0.5927],[-0.8200,   -0.5514],[-0.8000,   -0.5120],[-0.7800,   -0.4746],[-0.7600,   -0.4390],[-0.7400,   -0.4052],[-0.7200,   -0.3732],[-0.7000,   -0.3430],[-0.6800,   -0.3144],[-0.6600,   -0.2875],[-0.6400,   -0.2621],[-0.6200,   -0.2383],[-0.6000,   -0.2160],[-0.5800,   -0.1951],[-0.5600,   -0.1756],[-0.5400,   -0.1575],[-0.5200,   -0.1406],[-0.5000,   -0.1250],[-0.4800,   -0.1106],[-0.4600,   -0.0973],[-0.4400,   -0.0852],[-0.4200,   -0.0741],[-0.4000,   -0.0640],[-0.3800,   -0.0549],[-0.3600,   -0.0467],[-0.3400,   -0.0393],[-0.3200,   -0.0328],[-0.3000,   -0.0270],[-0.2800,   -0.0220],[-0.2600,   -0.0176],[-0.2400,   -0.0138],[-0.2200,   -0.0106],[-0.2000,   -0.0080],[-0.1800,   -0.0058],[-0.1600,   -0.0041],[-0.1400,   -0.0027],[-0.1200,   -0.0017],[-0.1000,   -0.0010],[-0.0800,   -0.0005],[-0.0600,   -0.0002],[-0.0400,   -0.0001],[-0.0200,   -0.0000],[0.0000,    0.0000],[0.0200 ,   0.0000],[0.0400 ,   0.0001],[0.0600 ,   0.0002],[0.0800 ,   0.0005],[0.1000 ,   0.0010],[0.1200 ,   0.0017],[0.1400 ,   0.0027],[0.1600 ,   0.0041],[0.1800 ,   0.0058],[0.2000 ,   0.0080],[0.2200 ,   0.0106],[0.2400 ,   0.0138],[0.2600 ,   0.0176],[0.2800 ,   0.0220],[0.3000 ,   0.0270],[0.3200 ,   0.0328],[0.3400 ,   0.0393],[0.3600 ,   0.0467],[0.3800 ,   0.0549],[0.4000 ,   0.0640],[0.4200 ,   0.0741],[0.4400 ,   0.0852],[0.4600 ,   0.0973],[0.4800 ,   0.1106],[0.5000 ,   0.1250],[0.5200 ,   0.1406],[0.5400 ,   0.1575],[0.5600 ,   0.1756],[0.5800 ,   0.1951],[0.6000 ,   0.2160],[0.6200 ,   0.2383],[0.6400 ,   0.2621],[0.6600 ,   0.2875],[0.6800 ,   0.3144],[0.7000 ,   0.3430],[0.7200 ,   0.3732],[0.7400 ,   0.4052],[0.7600 ,   0.4390],[0.7800 ,   0.4746],[0.8000 ,   0.5120],[0.8200 ,   0.5514],[0.8400 ,   0.5927],[0.8600 ,   0.6361],[0.8800 ,   0.6815],[0.9000 ,   0.7290],[0.9200 ,   0.7787],[0.9400 ,   0.8306],[0.9600 ,   0.8847],[0.9800 ,   0.9412],[1.0000 ,   1.0000]];\nvar sine_data = [[-1.0000,    0.0001],[-0.9802,    0.0621],[-0.9604,    0.1238],[-0.9406,    0.1851],[-0.9208,    0.2456],[-0.9010,    0.3052],[-0.8812,    0.3636],[-0.8614,    0.4207],[-0.8416,    0.4761],[-0.8218,    0.5297],[-0.8020,    0.5812],[-0.7822,    0.6305],[-0.7624,    0.6774],[-0.7426,    0.7217],[-0.7228,    0.7632],[-0.7030,    0.8018],[-0.6832,    0.8373],[-0.6634,    0.8696],[-0.6436,    0.8986],[-0.6238,    0.9241],[-0.6040,    0.9460],[-0.5842,    0.9643],[-0.5644,    0.9789],[-0.5446,    0.9898],[-0.5248,    0.9968],[-0.5050,    1.0000],[-0.4851,    0.9994],[-0.4653,    0.9949],[-0.4455,    0.9866],[-0.4257,    0.9745],[-0.4059,    0.9587],[-0.3861,    0.9392],[-0.3663,    0.9160],[-0.3465,    0.8894],[-0.3267,    0.8593],[-0.3069,    0.8260],[-0.2871,    0.7894],[-0.2673,    0.7499],[-0.2475,    0.7074],[-0.2277,    0.6623],[-0.2079,    0.6145],[-0.1881,    0.5645],[-0.1683,    0.5122],[-0.1485,    0.4580],[-0.1287,    0.4021],[-0.1089,    0.3445],[-0.0891,    0.2857],[-0.0693,    0.2258],[-0.0495,    0.1650],[-0.0297,    0.1035],[-0.0099,    0.0417],[0.0099,   -0.0203],[0.0297,   -0.0822],[0.0495,   -0.1438],[0.0693,   -0.2049],[0.0891,   -0.2651],[0.1089,   -0.3244],[0.1287,   -0.3823],[0.1485,   -0.4389],[0.1683,   -0.4937],[0.1881,   -0.5466],[0.2079,   -0.5975],[0.2277,   -0.6460],[0.2475,   -0.6921],[0.2673,   -0.7355],[0.2871,   -0.7760],[0.3069,   -0.8136],[0.3267,   -0.8481],[0.3465,   -0.8793],[0.3663,   -0.9071],[0.3861,   -0.9315],[0.4059,   -0.9522],[0.4257,   -0.9693],[0.4455,   -0.9827],[0.4653,   -0.9923],[0.4851,   -0.9981],[0.5050,   -1.0000],[0.5248,   -0.9981],[0.5446,   -0.9924],[0.5644,   -0.9828],[0.5842,   -0.9695],[0.6040,   -0.9524],[0.6238,   -0.9317],[0.6436,   -0.9074],[0.6634,   -0.8797],[0.6832,   -0.8485],[0.7030,   -0.8141],[0.7228,   -0.7765],[0.7426,   -0.7360],[0.7624,   -0.6926],[0.7822,   -0.6466],[0.8020,   -0.5981],[0.8218,   -0.5473],[0.8416,   -0.4944],[0.8614,   -0.4396],[0.8812,   -0.3831],[0.9010,   -0.3251],[0.9208,   -0.2659],[0.9406,   -0.2056],[0.9604,   -0.1446]];\nvar tanh_data = [[-1.0000,   -1.0000],[-0.9800,   -1.0000],[-0.9600,   -1.0000],[-0.9400,   -1.0000],[-0.9200,   -1.0000],[-0.9000,   -1.0000],[-0.8800,   -1.0000],[-0.8600,   -1.0000],[-0.8400,   -1.0000],[-0.8200,   -1.0000],[-0.8000,   -1.0000],[-0.7800,   -1.0000],[-0.7600,   -1.0000],[-0.7400,   -1.0000],[-0.7200,   -1.0000],[-0.7000,   -1.0000],[-0.6800,   -1.0000],[-0.6600,   -1.0000],[-0.6400,   -1.0000],[-0.6200,   -1.0000],[-0.6000,   -1.0000],[-0.5800,   -1.0000],[-0.5600,   -1.0000],[-0.5400,   -1.0000],[-0.5200,   -0.9999],[-0.5000,   -0.9999],[-0.4800,   -0.9999],[-0.4600,   -0.9998],[-0.4400,   -0.9997],[-0.4200,   -0.9996],[-0.4000,   -0.9993],[-0.3800,   -0.9990],[-0.3600,   -0.9985],[-0.3400,   -0.9978],[-0.3200,   -0.9967],[-0.3000,   -0.9951],[-0.2800,   -0.9926],[-0.2600,   -0.9890],[-0.2400,   -0.9837],[-0.2200,   -0.9757],[-0.2000,   -0.9640],[-0.1800,   -0.9468],[-0.1600,   -0.9217],[-0.1400,   -0.8854],[-0.1200,   -0.8337],[-0.1000,   -0.7616],[-0.0800,   -0.6640],[-0.0600,   -0.5370],[-0.0400,   -0.3799],[-0.0200,-0.1974],[0, 0],[0.0200,    0.1974],[0.0400,    0.3799],[0.0600,    0.5370],[0.0800,    0.6640],[0.1000,    0.7616],[0.1200,    0.8337],[0.1400,    0.8854],[0.1600,    0.9217],[0.1800,    0.9468],[0.2000,    0.9640],[0.2200,    0.9757],[0.2400,    0.9837],[0.2600,    0.9890],[0.2800,    0.9926],[0.3000,    0.9951],[0.3200,    0.9967],[0.3400,    0.9978],[0.3600,    0.9985],[0.3800,    0.9990],[0.4000,    0.9993],[0.4200,    0.9996],[0.4400,    0.9997],[0.4600,    0.9998],[0.4800,    0.9999],[0.5000,    0.9999],[0.5200,    0.9999],[0.5400,    1.0000],[0.5600,    1.0000],[0.5800,    1.0000],[0.6000,    1.0000],[0.6200,    1.0000],[0.6400,    1.0000],[0.6600,    1.0000],[0.6800,    1.0000],[0.7000,    1.0000],[0.7200,    1.0000],[0.7400,    1.0000],[0.7600,    1.0000],[0.7800,    1.0000],[0.8000,    1.0000],[0.8200,    1.0000],[0.8400,    1.0000],[0.8600,    1.0000],[0.8800,    1.0000],[0.9000,    1.0000],[0.9200,    1.0000],[0.9400,    1.0000],[0.9600,    1.0000],[0.9800,    1.0000],[1.0000,    1.0000]];\n\n/************************\n  Global Variables\n*************************/\n\n//Threasholds for the fitness function\nvar superHealthyThreshold = 0;\nvar fitThreshold = 5; //This is a percentage of death. So 25 woul be 25% a fit solution will die.\nvar averageThreshold = 30;\nvar unFitThreshold = 50;//Same as above.\n\n\n//The rate of mutations\n//NB: this is % so that we can chose very small mutation rates\n$scope.mutationRate = 1;\n\n//This is the crossOverRate\n$scope.crossOverRate = 10;\n\n//This is the crossOverRate\n$scope.initialPopilationSize = 1;\n\n//This is the crossOverRate\n$scope.maxIterations = 1;\n\n//This is where I store the average error per population.\n//I do this only so that I can display the data if we wish to view it.\nvar averageErrors = [];\n\n$scope.runTimeGrahA = [];\n$scope.runTimeGrahB = [];\n\n//This is what is set when a function select button is pressed\nvar selected_data = null;\n\n\n/************************************************************\n                    Activation Functions\n\nBecause I designed my MLP to go between the values -1 and 1 I tweek some\nof the functions so that they would allow outputs between these values\nrather than have values starting from 0\n\nThe activation function array contains the encoding for each of these\n\n[0] = Step\n[1] = Sigmoid using Exp\n[2] = Sigmoid using tanh\n[3] = Piecwise Linear\n[4] = Gaussian\n*************************************************************/\n\n\nvar nullFunction = function(){\n    return 0;\n}\n\nvar sigmoidExp = function(input, constant){\n  input = input * constant;\n  var temp = (2/(1+Math.pow(Math.E, -input))) - 1;\n  //console.log(\"Exp Sigmoid: \"+temp);\n  return temp;\n\n}\n\nvar sigmoidTanh = function(input, constant){\n\n  var temp = Math.tanh(constant*input);\n  //console.log(\"Tanh Sigmoid i: \"+temp);\n  //console.log(\"Tanh Sigmoid o: \"+temp);\n  return temp;\n\n}\n\nvar cosineFunction = function(input,constant){\n\n  var temp = Math.cos(constant*input);\n  return temp;\n}\n\nvar gaussian = function(input){\n\nvar temp = 10 * Math.exp((-input * input)/2) - 5;\n\n//console.log(\"Gaussian: \" + temp);\n\nreturn temp;\n\n}\n\n\n\n\n/***************************************\n            Perceptron Itself\n\n    This is the code I used to build a\n    perceptron function as a base to\n    build the rest of the MLP.\n    It is designed to be reusable.\n****************************************/\n\nvar perceptron = function(input, weights, activFunc){\n\n  //Reads and sets the weights and the input values, w() and x() in our perceptron\n  this.x = [];\n  this.x = input;\n\n  this.w = [];\n  this.w = weights;\n  this.activFunc = activFunc;\n\n  //TODO: bias set to 0 for now.\n  var bias = 0;\n\n  this.sum = input[0];\n  var tempSum = 0;\n\n  for (var i = 0; i < this.x.length; i++) {\n    tempSum = tempSum + (this.w[i]*this.x[i]);\n  };\n\n  tempSum = tempSum + bias;\n  this.sum = tempSum;\n\n\n  switch(activFunc[0]){\n    case 0:\n          this.output = nullFunction();\n          break;\n    case 1:\n          this.output = sigmoidExp(this.sum, activFunc[1]);\n          break;\n    case 2:\n          this.output = sigmoidTanh(this.sum, activFunc[1]);\n          break;\n    case 3:\n          this.output =  cosineFunction(this.sum, activFunc[1]);\n          break;\n    case 4:\n          this.output = gaussian(this.sum, activFunc[1]);\n          break;\n    default:\n          this.output = sigmoidTanh(this.sum, activFunc[1]);\n          console.log(\"There was an error reading the assigned activation function to this node so the default sigmoid Tanh was used!\");\n  }\n\n}\n\n\n/***************************************\n           Topology Functions\n\n    Since I didn't need to evolve the\n    topology of the MLP these functions\n    weren't designed to be flexible.\n****************************************/\n\n\nvar singleInputLayer = function(input,w, aFunc){\n\n  var input_1 = new perceptron(input, w, aFunc[0]);\n\n  return input_1;\n}\n\nvar hiddenLayer = function(inputNode, w, aFunc){\n\n  var hidden_1 = new perceptron([inputNode.output], w.splice(0,1), aFunc[2]);\n  var hidden_2 = new perceptron([inputNode.output], w.splice(0,1), aFunc[3]);\n  var hidden_3 = new perceptron([inputNode.output], w.splice(0,1), aFunc[4]);\n  var hidden_4 = new perceptron([inputNode.output], w.splice(0,1), aFunc[5]);\n  var hidden_5 = new perceptron([inputNode.output], w.splice(0,1), aFunc[6]);\n\n  var hiddenNodes = [hidden_1, hidden_2, hidden_3, hidden_4 ,hidden_5];\n\n  return hiddenNodes;\n\n}\n\nvar outputLayer = function(hiddenNodes,w,aFunc){\n\n  var outerLayer = new perceptron(\n        [hiddenNodes[0].output,\n         hiddenNodes[1].output,\n         hiddenNodes[2].output,\n         hiddenNodes[3].output,\n         hiddenNodes[4].output\n        ], w, aFunc[7]);\n\n    return outerLayer;\n}\n\n\n\n/*******************************************\n  This function creates a random activation\n  funtion and randomises it's settings.\n********************************************/\n\nvar createRandomAFunc= function(){\n\n  var aFunc = [];\n\n  var random0 = Math.floor((Math.random() * 10)/2);\n  aFunc.push(random0);\n  var random1 = Math.floor((Math.random() * 10)/2);\n  aFunc.push(random1);\n\n  return aFunc;\n\n}\n\n\n/****************************************\n  This function creates a new MLP with\n  random weights. This is used to create\n  the initial population\n*****************************************/\n\nvar createNewRandMLP = function(input){\n  var weights = [Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random()\n                ];\n\n    var aFunc = [createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc()\n                ];\n\n\n    //divide up the weights between the nodes.\n    var temp = [];\n    for(var i = 0; i< weights.length; i++){\n      temp[i] = weights[i];\n    }\n    var inputWeights = temp.splice(0,2);\n    var hiddenWeights = temp.splice(0,5);\n    var outputWeights = temp.splice(0,5);\n\n\n    //create the three layers.\n    var iLayer = singleInputLayer(input, inputWeights, aFunc);\n    var hLayer = hiddenLayer(iLayer, hiddenWeights, aFunc);\n    var oLayer = outputLayer(hLayer, outputWeights, aFunc);\n\n\n    //error checking of the network.\n    //This isn't yet the MSE this happens later.\n    //I just needed to keep track of (di-ui)^2\n    var error = Math.pow((input - oLayer.output),2);\n\n    //create a JS object to add to the global population\n    var allLayers = {\n                      'weights': weights,\n                      'aFunc': aFunc,\n                      'inputLayer': iLayer,\n                      'hiddenLayer': hLayer,\n                      'outputLayer': oLayer,\n                      'error': error\n                    };\n    return allLayers;\n}\n\n/****************************************\n  This function creates a new MLP with\n  pre-set weights. This is used to create\n  children from parent nodes, where only\n  the weights are evolved.\n*****************************************/\n\nvar createNewMLP = function(input, weights){\n\n    var aFunc = [createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc()\n                ];\n\n\n    //divide up the weights between the nodes.\n    var temp = [];\n    for(var i = 0; i< weights.length; i++){\n      temp[i] = weights[i];\n    }\n    var inputWeights = temp.splice(0,2);\n    var hiddenWeights = temp.splice(0,5);\n    var outputWeights = temp.splice(0,5);\n\n\n    //create the three layers.\n    var iLayer = singleInputLayer(input, inputWeights, aFunc);\n    var hLayer = hiddenLayer(iLayer, hiddenWeights, aFunc);\n    var oLayer = outputLayer(hLayer, outputWeights, aFunc);\n\n    //error checking of the network.\n    //This isn't yet the MSE this happens later.\n    //I just needed to keep track of (di-ui)^2\n    var error = Math.pow((input - oLayer.output),2);\n\n    //create a JS object to add to the global population\n    var allLayers = {\n                      'weights': weights,\n                      'aFunc': aFunc,\n                      'inputLayer': iLayer,\n                      'hiddenLayer': hLayer,\n                      'outputLayer': oLayer,\n                      'error': error\n                    };\n    return allLayers;\n}\n\nvar createNewMLPaf = function(input, aFunc){\n\n  var weights = [Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random()\n                ];\n\n\n    //divide up the weights between the nodes.\n    var temp = [];\n    for(var i = 0; i< weights.length; i++){\n      temp[i] = weights[i];\n    }\n    var inputWeights = temp.splice(0,2);\n    var hiddenWeights = temp.splice(0,5);\n    var outputWeights = temp.splice(0,5);\n\n\n    //create the three layers.\n    var iLayer = singleInputLayer(input, inputWeights, aFunc);\n    var hLayer = hiddenLayer(iLayer, hiddenWeights, aFunc);\n    var oLayer = outputLayer(hLayer, outputWeights, aFunc);\n\n    //error checking of the network.\n    //This isn't yet the MSE this happens later.\n    //I just needed to keep track of (di-ui)^2\n    var error = Math.pow((input - oLayer.output),2);\n\n    //create a JS object to add to the global population\n    var allLayers = {\n                      'weights': weights,\n                      'aFunc': aFunc,\n                      'inputLayer': iLayer,\n                      'hiddenLayer': hLayer,\n                      'outputLayer': oLayer,\n                      'error': error\n                    };\n    return allLayers;\n}\n\nvar createNewMLPboth = function(input,weights, aFunc){\n\n    //divide up the weights between the nodes.\n    var temp = [];\n    for(var i = 0; i< weights.length; i++){\n      temp[i] = weights[i];\n    }\n    var inputWeights = temp.splice(0,2);\n    var hiddenWeights = temp.splice(0,5);\n    var outputWeights = temp.splice(0,5);\n\n\n    //create the three layers.\n    var iLayer = singleInputLayer(input, inputWeights, aFunc);\n    var hLayer = hiddenLayer(iLayer, hiddenWeights, aFunc);\n    var oLayer = outputLayer(hLayer, outputWeights, aFunc);\n\n    //error checking of the network.\n    //This isn't yet the MSE this happens later.\n    //I just needed to keep track of (di-ui)^2\n    var error = Math.pow((input - oLayer.output),2);\n\n    //create a JS object to add to the global population\n    var allLayers = {\n                      'weights': weights,\n                      'aFunc': aFunc,\n                      'inputLayer': iLayer,\n                      'hiddenLayer': hLayer,\n                      'outputLayer': oLayer,\n                      'error': error\n                    };\n    return allLayers;\n}\n\n\n/*************************************\n    This initialises a new population\n    of size 'n'\n*************************************/\n\nvar initializePopulation = function(n){\n\n  var size = n;\n\n  var population = [];\n  for (var i = 0; i<size; i++) {\n    var temp = createNewRandMLP([1]);\n    population.push(temp);\n  }\n\n  return population;\n}\n\n\n/***************************************\n  This function returns the error\n  information on the population passed\n  It'll return an object containing\n  the total, average,min, max error\n  and an array of all the errors.\n****************************************/\n\nvar errorChecking = function(population){\n\n  var size = population.length;\n  if(size == 0){\n      alert(\"Trying to read an empty population\");\n      return\n  }\n  var totalError = 0.0;\n  var minError = [1.01, -1];\n  var maxError = [0.0, -1];\n  var allErrors = []; //just for debug to ease reading\n\n  for (var i = 0; i < size; i++) {\n    allErrors.push(population[i].error); //just for debug!!\n    var temp = Math.abs(population[i].error);\n    totalError += temp;\n    if(temp < minError[0]){\n      minError = [temp,i];\n    }\n    if(temp>maxError[0]){\n      maxError = [temp,i];\n    }\n  };\n  var avError = totalError/size;\n\n  var errorStats = {\n      'totalError': totalError,\n      'minError': minError,\n      'maxError': maxError,\n      'avError': avError,\n      'allErrors': allErrors\n  }\n  console.log(\"Average Error: \"+avError);\n  averageErrors.push(avError);\n  return errorStats;\n}\n\n\nvar fitnessFunction = function(population){\n\n  var errorStats = errorChecking(population);\n  var threshold = errorStats.avError;\n  var veryHealthy = threshold/2;\n  var superHealthy = threshold/4;\n  var insanelyHealthy = threshold/8;\n  var newPopulation = [];\n\n  for (var i = 0; i < population.length; i++) {\n\n\n    var random = (Math.floor(Math.random()*100 + 1));\n    if(Math.abs(population[i].error) < insanelyHealthy){\n          newPopulation.push(population[i]);\n        }\n    if(Math.abs(population[i].error) < superHealthy){\n          if(random>superHealthyThreshold){\n            newPopulation.push(population[i]);}\n        }\n    else if(Math.abs(population[i].error) < veryHealthy){\n          if(random>fitThreshold){\n          newPopulation.push(population[i]);\n          //console.log(\"Fit MLP added\");\n          }\n        }\n    else if(Math.abs(population[i].error) < threshold){\n      if(random>averageThreshold){\n      newPopulation.push(population[i]);\n      //console.log(\"Fit MLP added\");\n      }\n    }\n    else{\n      if(random>unFitThreshold){\n      newPopulation.push(population[i]);\n      //console.log(\"UNFIT MLP added\");\n      }\n    }\n  }\n   return newPopulation;\n\n\n}\n\n$scope.testMLP;\n$scope.test1= function(){\n      $scope.testMLP = initializePopulation(50);\n      samplePopulation(linear_data,$scope.testMLP);\n}\n\n\nvar samplePopulation = function(data,population){\n  var size = population.length;\n  console.log(\"Size: \" + size);\n\n  for(var i=0; i<size; i++){\n    for(var d = 0; d<data.length; d++){\n      var tempArr = checkMLP([data[d][0]],data[d][1], d, population[i]);\n      $scope.runTimeGrahA.push(tempArr);\n      var tempMSE = 0;\n      for(var s = 0; s< $scope.runTimeGrahA.length; s++){\n        tempMSE = tempMSE + Math.pow(($scope.runTimeGrahA[s][0]-$scope.runTimeGrahA[s][1]),2);\n      }\n    tempMSE = tempMSE / $scope.runTimeGrahA.length;\n    $scope.runTimeGrahB.push(tempMSE);\n    }\n    var totalErr = population[i].error;\n    var mse = totalErr/data.length;\n    population[i].error = mse;\n    console.log(\"MSE: \" +mse);\n  }\n\n\n}\n\n\n$scope.selectFunction = function(func){\n\n  switch(func){\n    case 0:\n        selected_data = linear_data;\n        break;\n    case 1:\n        selected_data = cubic_data;\n        break;\n    case 2:\n        selected_data = sine_data;\n        break;\n    case 3:\n        selected_data = tanh_data;\n        break;\n    default:\n        alert(\"Error in selecting your data!\");\n  }\n\n}\n$scope.secGen;\n\n$scope.test = function(popSize,iterations){\n\n      if(selected_data == null){\n        alert(\"You have not selected a function!!\")\n      }\n      else{\n        $scope.runTimeGrahA = [];\n        $scope.runTimeGrahB = [];\n        $scope.newpop = initializePopulation(popSize);\n        console.log(\"Debug1: \")\n        samplePopulation(selected_data,$scope.newpop);\n\n        $scope.secGen = fitnessFunction($scope.newpop);\n\n        var difference = popSize - $scope.secGen.length\n        $scope.secGen = crossOverWeights($scope.secGen,difference);\n\n        samplePopulation(selected_data,$scope.secGen);\n\n        for(var i=1;i<iterations;i++){\n            $scope.secGen = fitnessFunction($scope.secGen);\n            var difference = popSize - $scope.secGen.length\n            $scope.secGen = crossOverWeights($scope.secGen,difference);\n            samplePopulation(selected_data,$scope.secGen);\n            console.log(\"Iteration: \" + i)\n        }\n        //console.log(\"Errors over populations: \"+ averageErrors);\n        var finalErrorStats = errorChecking($scope.secGen);\n        var bestMLP = finalErrorStats.minError[1];\n        console.log(\"Best Score: \"+finalErrorStats.minError[0]);\n        $scope.disp = $scope.secGen[bestMLP];\n        var ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n        var myNewChart = new Chart(ctx).PolarArea($scope.runTimeGrahA);\n      }\n}\n\n$scope.runWithAFunc = function(popSize,iterations){\n\n      if(selected_data == null){\n        alert(\"You have not selected a function!!\")\n      }\n      else{\n        $scope.runTimeGrahA = [];\n        $scope.runTimeGrahB = [];\n        $scope.newpop = initializePopulation(popSize);\n        console.log(\"Debug1: \")\n        samplePopulation(selected_data,$scope.newpop);\n\n        $scope.secGen = fitnessFunction($scope.newpop);\n\n        var difference = popSize - $scope.secGen.length\n        $scope.secGen = crossOverAFunc($scope.secGen,difference);\n\n        samplePopulation(selected_data,$scope.secGen);\n\n        for(var i=1;i<iterations;i++){\n            $scope.secGen = fitnessFunction($scope.secGen);\n            var difference = popSize - $scope.secGen.length\n            $scope.secGen = crossOverAFunc($scope.secGen,difference);\n            samplePopulation(selected_data,$scope.secGen);\n            console.log(\"Iteration: \" + i)\n        }\n        var finalErrorStatsFunc = errorChecking($scope.secGen);\n          var bestMLPFunc = finalErrorStatsFunc.minError[1];\n          $scope.disp = $scope.secGen[bestMLPFunc];\n      }\n}\n\n\n$scope.runWithBoth = function(popSize,iterations){\n\n      if(selected_data == null){\n        alert(\"You have not selected a function!!\")\n      }\n      else{\n        $scope.runTimeGrahA = [];\n        $scope.runTimeGrahB = [];\n        $scope.newpop = initializePopulation(popSize);\n        console.log(\"Debug1: \")\n        samplePopulation(selected_data,$scope.newpop);\n\n        $scope.secGen = crossOverBoth($scope.newpop,popSize);\n\n        $scope.secGen = fitnessFunction($scope.newpop);\n\n        var difference = popSize - $scope.secGen.length;\n\n        samplePopulation(selected_data,$scope.secGen);\n\n        for(var i=1;i<iterations;i++){\n            $scope.secGen = fitnessFunction($scope.secGen);\n            var difference = popSize - $scope.secGen.length\n            $scope.secGen = crossOverBoth($scope.secGen,difference);\n            samplePopulation(selected_data,$scope.secGen);\n            console.log(\"Iteration: \" + i)\n        }\n\n          var finalErrorStatsBoth = errorChecking($scope.secGen);\n          var bestMLPBoth = finalErrorStatsBoth.minError[1];\n          $scope.disp = $scope.secGen[bestMLPBoth];\n      }\n}\n\nvar checkMLP = function(input, expected, sampleNumber, mlp){\n\n    var aFunc = mlp.aFunc;\n\n\n    //divide up the weights between the nodes.\n    var temp = [];\n    for(var i = 0; i< mlp.weights.length; i++){\n      temp[i] = mlp.weights[i];\n    }\n    var inputWeights = temp.splice(0,2);\n    var hiddenWeights = temp.splice(0,5);\n    var outputWeights = temp.splice(0,5);\n\n\n    //create the three layers.\n    var iLayer = singleInputLayer(input, inputWeights, aFunc);\n    var hLayer = hiddenLayer(iLayer, hiddenWeights, aFunc);\n    var oLayer = outputLayer(hLayer, outputWeights, aFunc);\n\n    mlp.inputLayer = iLayer;\n    mlp.hiddenLayer = hLayer;\n    mlp.outputLayer = oLayer;\n    //error checking of the network.\n    var error = ( (expected - oLayer.output) * (expected - oLayer.output) );\n\n    mlp.error = mlp.error + error;\n\n  /*  {\n    'weights': mlp.weights,\n    'aFunc': mlp.aFunc,\n    'inputLayer': mlp.iLayer,\n    'hiddenLayer': mlp.hLayer,\n    'outputLayer': mlp.oLayer,\n    'error': mlp.error\n  };*/\n    var myArray = [expected,oLayer.output];\n    return myArray;\n}\n\n/*************************************************\n    The following 3 funtion splits two parents into\n    two parts and creates one child from two of those\n    One does weight, one does activation function and\n    an other does both.\n**************************************************/\n\n\n/*****************************************************\n*\n*       This function Crosses over both the activation\n*       and the weights\n*\n*\n******************************************************/\n\nvar crossOverWeights = function(population, difference){\n\n    var babies = [];\n    var parents = [];\n    var numParents= population.length;\n    //this means you have killed all your population\n    if(numParents == 0){\n      parents = initializePopulation(difference);\n      console.log(\"You have set the fitnessFunction to be too harsh and you have had to create a new population\");\n      console.log(\"Maybe try relaxing the parameters\");\n\n      return parents;\n    }\n\n    var weightsSize = 12;\n    //copy over parents\n    for(var i = 0; i< numParents; i++){\n      parents[i] = population[i];\n    }\n\n    //whilst there is still space, randomly select two adults and splice\n    for(var i = 0; i < $scope.crossOverRate; i++){\n\n      var ran1 = Math.floor(Math.random() * 100)%numParents;\n      var ran2 = Math.floor(Math.random() * 100)%numParents;\n      var ran3 = Math.floor(Math.random() * 100)%weightsSize;\n      var ran4 = Math.floor(Math.random() * 100) + 1;\n      var temp1 = [];\n      var temp2 = [];\n\n      for(var j = 0; j<weightsSize; j++){\n        temp1[j] = parents[ran1].weights[j];\n        temp2[j] = parents[ran2].weights[j];\n      }\n      //added to a new list so that the babies don't become parents in the same generation\n      var babysWeights = [];\n      if((ran1 % 5) < 1){\n        for(var k = 0; k< ran3; k++){\n            babysWeights[k] = temp1[k];\n        }\n        for(var k = ran3; k< weightsSize; k++){\n            babysWeights[k] = temp2[k];\n        }\n      }\n      else{\n        for(var k = 0; k< weightsSize; k++){\n            babysWeights[k] = temp1[k];\n            babysWeights[k+1] = temp2[+1];\n        }\n      }\n\n      //this randomly mutates one of the weights based on the mutation rate.\n      if(ran4<$scope.mutationRate){\n        ran4 = ran4 % 12;\n        babysWeights[ran4] = Math.random();\n        console.log(\"Mutation Occured!\");\n      }\n\n\n      babies.push(createNewMLP([Math.random()],babysWeights));\n    }\n\n    //combine the two lists.\n    for(var s = 0; s< difference; s++){\n      parents.push(babies[s]);\n    }\n    return parents;\n}\n\n\n/*****************************************************\n*\n*       This function Crosses over both the activation\n*       and the weights\n*\n*\n******************************************************/\n\nvar crossOverBoth = function(population, difference){\n\n    var babies = [];\n    var parents = [];\n    var numParents= population.length;\n    //this means you have killed all your population\n    if(numParents == 0){\n      parents = initializePopulation(difference);\n      console.log(\"You have set the fitnessFunction to be too harsh and you have had to create a new population\");\n      console.log(\"Maybe try relaxing the parameters\");\n\n      return parents;\n    }\n\n    var weightsSize = 12;\n    var aFuncSize = 8;\n    //copy over parents\n    for(var i = 0; i< numParents; i++){\n      parents[i] = population[i];\n    }\n\n    //whilst there is still space, randomly select two adults and splice\n    for(var i = 0; i < $scope.crossOverRate; i++){\n\n      var ran1 = Math.floor(Math.random() * 100)%numParents;\n      var ran2 = Math.floor(Math.random() * 100)%numParents;\n      var ran3 = Math.floor(Math.random() * 100)%weightsSize;\n      var ran4 = Math.floor(Math.random() * 100) + 1;\n      var ran5 = Math.floor(Math.random() * 100) + 1;\n      var temp1w = [];\n      var temp2w = [];\n      var temp1f = [];\n      var temp2f = [];\n\n      for(var j = 0; j<weightsSize; j++){\n        temp1w[j] = parents[ran1].weights[j];\n        temp2w[j] = parents[ran2].weights[j];\n      }\n      for(var j = 0; j<weightsSize; j++){\n        temp1f[j] = parents[ran1].aFunc[j];\n        temp2f[j] = parents[ran2].aFunc[j];\n      }\n      //added to a new list so that the babies don't become parents in the same generation\n      var babysWeights = [];\n      if((ran1 % 5) < 1){\n        for(var k = 0; k< ran3; k++){\n            babysWeights[k] = temp1w[k];\n        }\n        for(var k = ran3; k< weightsSize; k++){\n            babysWeights[k] = temp2w[k];\n        }\n      }\n      else{\n        for(var k = 0; k< weightsSize; k++){\n            babysWeights[k] = temp1w[k];\n            babysWeights[k+1] = temp2w[+1];\n        }\n      }\n      var babysAFunc = [];\n      if((ran2 % 5) < 1){\n        for(var k = 0; k< ran3; k++){\n            babysAFunc[k] = temp1f[k];\n        }\n        for(var k = ran3; k< weightsSize; k++){\n            babysAFunc[k] = temp2f[k];\n        }\n      }\n      else{\n        for(var k = 0; k< weightsSize; k++){\n            babysAFunc[k] = temp1f[k];\n            babysAFunc[k+1] = temp2f[+1];\n        }\n      }\n\n      //this randomly mutates one of the weights based on the mutation rate.\n      if(ran4<$scope.mutationRate){\n        ran4 = ran4 % 12;\n        babysWeights[ran4] = Math.random();\n        console.log(\"Mutation Occured!\");\n      }\n      if(ran5<$scope.mutationRate){\n        ran4 = ran4 % 12;\n        babysAFunc[ran4] = Math.random();\n        console.log(\"Mutation Occured!\");\n      }\n\n\n      babies.push(createNewMLPboth([Math.random()],babysWeights, babysAFunc));\n    }\n\n    //combine the two lists.\n    for(var s = 0; s< difference; s++){\n      parents.push(babies[s]);\n    }\n    return parents;\n}\n\n\n/*****************************************************\n*\n*  This function Crosses over both the activation only\n*\n******************************************************/\n\n\n\nvar crossOverAFunc = function(population, difference){\n\n    var babies = [];\n    var parents = [];\n    var numParents= population.length;\n    //this means you have killed all your population\n    if(numParents == 0){\n      parents = initializePopulation(difference);\n      console.log(\"You have set the fitnessFunction to be too harsh and you have had to create a new population\");\n      console.log(\"Maybe try relaxing the parameters\");\n\n      return parents;\n    }\n\n    var aFuncSize = 8;\n    //copy over parents\n    for(var i = 0; i< numParents; i++){\n      parents[i] = population[i];\n    }\n\n    //whilst there is still space, randomly select two adults and splice\n    for(var i = 0; i < $scope.crossOverRate; i++){\n\n      var ran1 = Math.floor(Math.random() * 100)%numParents;\n      var ran2 = Math.floor(Math.random() * 100)%numParents;\n      var ran3 = Math.floor(Math.random() * 100)%aFuncSize;\n      var ran4 = Math.floor(Math.random() * 100) + 1;\n      var temp1 = [];\n      var temp2 = [];\n\n      for(var j = 0; j<aFuncSize; j++){\n        temp1[j] = parents[ran1].aFunc[j];\n        temp2[j] = parents[ran2].aFunc[j];\n      }\n      //added to a new list so that the babies don't become parents in the same generation\n      var babysAFunc = [];\n      if((ran1 % 5) < 1){\n        for(var k = 0; k< ran3; k++){\n            babysAFunc[k] = temp1[k];\n        }\n        for(var k = ran3; k< aFuncSize; k++){\n            babysAFunc[k] = temp2[k];\n        }\n      }\n      else{\n        for(var k = 0; k< aFuncSize; k++){\n            babysAFunc[k] = temp1[k];\n            babysAFunc[k+1] = temp2[+1];\n        }\n      }\n\n      //this randomly mutates one of the weights based on the mutation rate.\n      if(ran4<$scope.mutationRate){\n        ran4 = ran4 % 12;\n        babysAFunc[ran4] = Math.random();\n        console.log(\"Mutation Occured!\");\n      }\n\n\n      babies.push(createNewMLPaf([Math.random()],babysAFunc));\n    }\n\n    //combine the two lists.\n    for(var s = 0; s< difference; s++){\n      parents.push(babies[s]);\n    }\n    return parents;\n}\n\n\n\n\n\n/***************************************\n      What is bellow works.\n      However is basic and random.\n****************************************/\n\n\n$scope.runTheMLP = function(max){\n\n  var oldMlp = initializePopulation(5);\n  var begErrorStats = errorChecking(oldMlp);\n  var newGen = randomPurging(oldMlp);\n  for(var i = 1; i< max; i++){\n    newGen = randomPurging(newGen);\n  }\n  var endErrorStats = errorChecking(newGen);\n\n  console.log(\"Beginning Stats: \" + begErrorStats.avError);\n  console.log(\"End Stats: \" + endErrorStats.avError);\n\n  var bestMLP = endErrorStats.minError[1];\n\n  console.log(\"Best E: \"+newGen[bestMLP].error);\n  console.log(\"Best X: \"+newGen[bestMLP].inputLayer.x);\n  console.log(\"Best O: \"+newGen[bestMLP].outputLayer.output);\n  console.log(\"Correct: \"+ correct)\n  $scope.bestMLP = newGen[bestMLP];\n}\n\nvar randomPurging = function(oldMlp){\n\n  var newMlp = purgeTheWeak(oldMlp);\n\n  var difference = (oldMlp.length - newMlp.length);\n\n  procreate(newMlp,difference);\n\n  return newMlp;\n\n}\n\nvar procreate = function(population,n){\n\n  for(var i = 0; i<n; i++){\n    var temp = createNewRandMLP([Math.random()]);\n    population.push(temp);\n  }\n\n  return population;\n\n\n}\n\nvar purgeTheWeak = function(population){\n\n\n  var errorStats = errorChecking(population);\n  var threshold = errorStats.avError;\n  var newPopulation = [];\n\n  for (var i = 0; i < population.length; i++) {\n    if(Math.abs(population[i].error) < threshold){\n      newPopulation.push(population[i]);\n    }\n  };\n\n  return newPopulation;\n\n\n}\n\n/*\nvar margin = {top: 20, right: 20, bottom: 30, left: 50},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\nvar parseDate = d3.time.format(\"%d-%b-%y\").parse;\n\nvar x = d3.time.scale()\n    .range([0, width]);\n\nvar y = d3.scale.linear()\n    .range([height, 0]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\");\n\nvar yAxis = d3.svg.axis()\n    .scale(y)\n    .orient(\"left\");\n\nvar line = d3.svg.line()\n    .x(function(d) { return x(d.date); })\n    .y(function(d) { return y(d.close); });\n\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n  x.domain(d3.extent($scope.secGen, function(d) { return $scope.secGen; }));\n  y.domain(d3.extent(data, function(d) { return d.close; }));\n\n  svg.append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n  svg.append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n    .append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \".71em\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Price ($)\");\n\n  svg.append(\"path\")\n      .datum(data)\n      .attr(\"class\", \"line\")\n      .attr(\"d\", line);\n});*/\n\n});"
  ]
}