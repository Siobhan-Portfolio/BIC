{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/home/siobhan/git/personal/BIC/BICCW2/BIC/src/main.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\n/******************************************************************************************\n                                         Angular Overhead\n*******************************************************************************************/\n\nvar app = angular.module('myApp', []);\n\napp.controller('myCtrl', function($scope) {\n\n\n\n\n\n/******************************************************************************************\n                                         Perceptron\n*******************************************************************************************/\n\n\n/****************************************\n * Input Variables:\n *   + Inputs Vector             phi(x)\n *     - Weights                 w\n *     - Input Values            x\n *     - SourceID                NodeID\n *\n *   + Bias                      b\n *\n * Node Variables:\n *  + Summing Function           SUM()\n *  + Activation Function        f(sum)\n *  + NodeID                     NodeID\n *\n * Output Variables:\n *   + Output Vector\n *     - Destination Node\n *     - Output Values\n *   + Error\n****************************************/\n$scope.input_1;\n$scope.input_2;\n$scope.outputTest;\n$scope.hiddenNodes;\n\n/************************\n  Global Variables\n*************************/\n\nvar fitThreshold = 25; //This is a percentage of death. So 25 woul be 25% a fit solution will die.\nvar unFitThreshold = 75;//Same as above.\nvar x_data = [1];\n\n\n/************************************************************\n                    Activation Functions\n\nBecause I designed my MLP to go between the values -1 and 1 I tweek some\nof the functions so that they would allow outputs between these values\nrather than have values starting from 0\n\nThe activation function array contains the encoding for each of these\n\n[0] = Step\n[1] = Sigmoid using Exp\n[2] = Sigmoid using tanh\n[3] = Piecwise Linear\n[4] = Gaussian\n*************************************************************/\n\n\nvar stepFunction = function(input,threshold){\n  if(input>=threshold){\n    //console.log(\"Step Function: \"+1);\n    return 1;\n  }\n  else{\n    //console.log(\"Step Function: \"+ (-1);\n    return -1;\n  }\n}\n\nvar sigmoidExp = function(input, constant){\n  input = input * constant;\n  var temp = (2/(1+Math.pow(Math.E, -input))) - 1;\n  //console.log(\"Exp Sigmoid: \"+temp);\n  return temp;\n\n}\n\nvar sigmoidTanh = function(input, constant){\n\n  var temp = Math.tanh(constant*input);\n  //console.log(\"Tanh Sigmoid: \"+temp);\n  return temp;\n\n}\n\nvar piecewiseLinear = function(input, bias, min, max){\n\n  if(input<=min){\n    //console.log(\"piecewiseLinear: \"+-1);\n    return -1;\n  }\n  if(input>=max){\n    //console.log(\"piecewiseLinear: \"+1);\n    return 1;\n  }\n  else {\n    var temp = input + bias;\n    //console.log(\"piecewiseLinear: \"+temp);\n    return (temp);\n  }\n\n}\n\nvar gaussian = function(input){\n\nvar gausConstant = 5/ Math.sqrt(2* Math.PI);\n\n\nvar temp = gausConstant * Math.exp(-5 * input * input) - 1;\n\n//console.log(\"Gaussian: \" + temp);\n\nreturn temp;\n\n}\n\n\n/***************************************\n            Perceptron Itself\n****************************************/\n\n\n\nvar perceptron = function(input, weights, activFunc){\n\n  //Reads and sets the weights and the input values, w() and x() in our perceptron\n  this.x = [];\n  this.x = input;\n  this.w = [];\n  this.w = weights;\n  this.activFunc = activFunc;\n\n//bias set to 0 for now.\n  var bias = 0;\n\n  this.sum = 0;\n  var tempSum = 0;\n\n  for (var i = this.x.length - 1; i >= 0; i--) {\n    tempSum = tempSum + (this.w[i]*this.x[i]);\n  };\n\n  tempSum = tempSum + bias;\n  this.sum = tempSum;\n\n  switch(activFunc[0]){\n    case 0:\n          this.output = stepFunction(this.sum, activFunc[1]);\n          break;\n    case 1:\n          this.output = sigmoidExp(this.sum, activFunc[1]);\n          break;\n    case 2:\n          this.output = sigmoidTanh(this.sum, activFunc[1]);\n          break;\n    case 3:\n          this.output =  piecewiseLinear(this.sum, activFunc[1], activFunc[2],activFunc[3]);\n          break;\n    case 4:\n          this.output = gaussian(this.sum, activFunc[1]);\n          break;\n    default:\n          this.output = sigmoidTanh(this.sum, activFunc[1]);\n          console.log(\"There was an error reading the assigned activation function to this node so the default sigmoid Tanh was used!\");\n  }\n\n}\n\n\n/***************************************\n           Topology Functions\n****************************************/\n\n\nvar singleInputLayer = function(input,w, aFunc){\n\n  //console.log(\"Input Weight \" + w);\n\n  var input_1 = new perceptron(input, w, aFunc[0]);\n\n  /*console.log(\"Input Layer (Single)\");\n  console.log(\"Input: \"+ input_1.x);\n  console.log(\"Weight: \"+ input_1.w);\n  console.log(\"Sum: \"+ input_1.sum);\n  console.log(\"Output: \"+ input_1.output);\n  console.log(\"------\");*/\n\n  return input_1;\n}\n\nvar hiddenLayer = function(inputNode, w, aFunc){\n\n  //console.log(\"Hidden Weight \" + w);\n  var hidden_1 = new perceptron([inputNode.output], w.splice(0,1), aFunc[2]);\n  var hidden_2 = new perceptron([inputNode.output], w.splice(0,1), aFunc[3]);\n  var hidden_3 = new perceptron([inputNode.output], w.splice(0,1), aFunc[4]);\n  var hidden_4 = new perceptron([inputNode.output], w.splice(0,1), aFunc[5]);\n  var hidden_5 = new perceptron([inputNode.output], w.splice(0,1), aFunc[6]);\n\n  /*console.log(\"Hidden Layer outputs\");\n  console.log(\"1: \" + hidden_1.output);\n  console.log(\"2: \" + hidden_2.output);\n  console.log(\"3: \" + hidden_3.output);\n  console.log(\"4: \" + hidden_4.output);\n  console.log(\"5: \" + hidden_5.output);\n  console.log(\"Hidden Layer sum\");\n  console.log(\"1: \" + hidden_1.sum);\n  console.log(\"2: \" + hidden_2.sum);\n  console.log(\"3: \" + hidden_3.sum);\n  console.log(\"4: \" + hidden_4.sum);\n  console.log(\"5: \" + hidden_5.sum);\n  console.log(\"------\");*/\n\n  var hiddenNodes = [hidden_1, hidden_2, hidden_3, hidden_4 ,hidden_5];\n\n  return hiddenNodes;\n\n}\n\nvar outputLayer = function(hiddenNodes,w,aFunc){\n  //console.log(\"Output Weights\" + w);\n  var outerLayer = new perceptron(\n        [hiddenNodes[0].output,\n         hiddenNodes[1].output,\n         hiddenNodes[2].output,\n         hiddenNodes[3].output,\n         hiddenNodes[4].output\n        ], w, aFunc[7]);\n\n    /*console.log(\"OutputLayer\");\n    console.log(\"Sum: \" + outerLayer.sum);\n    console.log(\"Output: \" + outerLayer.output);\n    console.log(\"------\");*/\n\n    return outerLayer;\n}\n\n/***************************************\n  This function creates a new MLP with\n  random weights\n****************************************/\n\nvar createRandomAFunc= function(){\n\n  var aFunc = [];\n\n  var random0 = Math.floor((Math.random() * 10)/2);\n  aFunc.push(random0);\n  var random1 = Math.floor((Math.random() * 10)/2);\n  aFunc.push(random1);\n  if(random0 == 3){\n    var random2 =0 - Math.random();\n    aFunc.push(random2);\n\n    var random3 = Math.random();\n    aFunc.push(random3);\n  }\n  else{\n    aFunc.push(0);\n    aFunc.push(0);\n  }\n\n  return aFunc;\n\n}\n\n\nvar createNewRandMLP = function(){\n  var weights = [Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random(),\n                 Math.random()\n                ];\n\n    var aFunc = [createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc()\n                ];\n\n\n    //divide up the weights between the nodes.\n    var temp = [];\n    for(var i = 0; i< weights.length; i++){\n      temp[i] = weights[i];\n    }\n    var inputWeights = temp.splice(0,2);\n    var hiddenWeights = temp.splice(0,5);\n    var outputWeights = temp.splice(0,5);\n\n\n    //create the three layers.\n    var iLayer = singleInputLayer([Math.random()], inputWeights, aFunc);\n    var hLayer = hiddenLayer(iLayer, hiddenWeights, aFunc);\n    var oLayer = outputLayer(hLayer, outputWeights, aFunc);\n\n\n    //error checking of the network.\n    var correctOutput = iLayer.x[0] * iLayer.x[0] * iLayer.x[0];\n    var error = correctOutput - oLayer.output;\n\n    //create a JS object to add to the global population\n    var allLayers = {\n                      'weights': weights,\n                      'aFunc': aFunc,\n                      'inputLayer': iLayer,\n                      'hiddenLayer': hLayer,\n                      'outputLayer': oLayer,\n                      'error': error\n                    };\n    return allLayers;\n}\n\nvar createNewMLP = function(weights){\n\n    var aFunc = [createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc(),\n                 createRandomAFunc()\n                ];\n\n\n    //divide up the weights between the nodes.\n    var temp = [];\n    for(var i = 0; i< weights.length; i++){\n      temp[i] = weights[i];\n    }\n    var inputWeights = temp.splice(0,2);\n    var hiddenWeights = temp.splice(0,5);\n    var outputWeights = temp.splice(0,5);\n\n\n    //create the three layers.\n    var iLayer = singleInputLayer([Math.random()], inputWeights, aFunc);\n    var hLayer = hiddenLayer(iLayer, hiddenWeights, aFunc);\n    var oLayer = outputLayer(hLayer, outputWeights, aFunc);\n\n\n    //error checking of the network.\n    var correctOutput = iLayer.x[0] * iLayer.x[0] * iLayer.x[0];\n    var error = correctOutput - oLayer.output;\n\n    //create a JS object to add to the global population\n    var allLayers = {\n                      'weights': weights,\n                      'aFunc': aFunc,\n                      'inputLayer': iLayer,\n                      'hiddenLayer': hLayer,\n                      'outputLayer': oLayer,\n                      'error': error\n                    };\n    return allLayers;\n}\n\n\n/*************************************\n    This initialises a new population\n    of size 'n'\n*************************************/\n\nvar initializePopulation = function(n){\n\n  var size = n;\n\n  var population = [];\n  for (var i = 0; i<size; i++) {\n    var temp = createNewRandMLP();\n    population.push(temp);\n  }\n\n  return population;\n}\n\n\n/***************************************\n  This function returns the error\n  information on the population passed\n  Like average, min, max error.\n****************************************/\n\nvar errorChecking = function(population){\n\n  var size = population.length;\n\n  var totalError = 0.0;\n  var minError = [1.01, -1];\n  var maxError = [0.0, -1];\n  var allErrors = []; //just for debug to ease reading\n\n  for (var i = 0; i < size; i++) {\n    allErrors.push(population[i].error); //just for debug!!\n    var temp = Math.abs(population[i].error);\n    totalError += temp;\n    if(temp < minError[0]){\n      minError = [temp,i];\n    }\n    if(temp>maxError[0]){\n      maxError = [temp,i];\n    }\n  };\n\n  var avError = totalError/size;\n\n  var errorStats = {\n      'totalError': totalError,\n      'minError': minError,\n      'maxError': maxError,\n      'avError': avError,\n      'allErrors': allErrors\n  }\n  console.log(avError);\n  return errorStats;\n}\n\n\nvar fitnessFunction = function(population){\n\n  var errorStats = errorChecking(population);\n  var threshold = errorStats.avError;\n  var newPopulation = [];\n\n  for (var i = 0; i < population.length; i++) {\n\n    var random = (Math.floor(Math.random()*100 + 1));\n\n    if(Math.abs(population[i].error) < threshold){\n      if(random>fitThreshold){\n      newPopulation.push(population[i]);\n      console.log(\"Fit MLP added\");\n      }\n    }\n    else{\n      if(random>unFitThreshold){\n      newPopulation.push(population[i]);\n      console.log(\"UNFIT MLP added\");\n      }\n    }\n  }\n  console.log(\"1st Gen Size: \" + population.length);\n  console.log(\"2nd Gen Size: \" + newPopulation.length);\n  return newPopulation;\n\n\n}\n\n$scope.test = function(n){\n\n  $scope.newpop = initializePopulation(n);\n\n  $scope.secGen = fitnessFunction($scope.newpop);\n\n  var difference = n - $scope.secGen.length\n\n  $scope.babies = crossOverWeights($scope.secGen,difference);\n\n}\n\n\n\n/***************************************\n      What is bellow works.\n      However is basic and random.\n****************************************/\n\n\n\n$scope.crossing = function(){\n\n  var population = initializePopulation(4);\n  crossOver(population);\n}\n\nvar crossOverWeights = function(population, difference){\n\n    var babies = [];\n    var parents = [];\n    var numParents= population.length;\n    //copy over parents\n    for(var i = 0; i< numParents; i++){\n      parents[i] = population[i];\n    }\n\n    //whilst there is still space, randomly select two adults and splice\n    for(var i = 0; i <difference; i++){\n\n      var random1 = Math.floor(Math.random() * 100)%numParents;\n      var random1 = Math.floor(Math.random() * 100)%numParents;\n      console.log(\"R1: \" + random1 + \"R2: \"+ random2);\n      var temp1 = [];\n      var temp2 = [];\n\n    }\n\n\n}\n\n\n/***************************************\n      These functions purge the lower\n      half of the population and then\n      create random children to replace\n      those that have been removed.\n****************************************/\n\n\n$scope.runTheMLP = function(max){\n\n  var oldMlp = initializePopulation(5);\n  var begErrorStats = errorChecking(oldMlp);\n  var newGen = randomPurging(oldMlp);\n  for(var i = 1; i< max; i++){\n    newGen = randomPurging(newGen);\n  }\n  var endErrorStats = errorChecking(newGen);\n\n  console.log(\"Beginning Stats: \" + begErrorStats.avError);\n  console.log(\"End Stats: \" + endErrorStats.avError);\n\n  var bestMLP = endErrorStats.minError[1];\n\n  console.log(\"Best E: \"+newGen[bestMLP].error);\n  console.log(\"Best X: \"+newGen[bestMLP].inputLayer.x);\n  console.log(\"Best O: \"+newGen[bestMLP].outputLayer.output);\n  console.log(\"Correct: \"+ correct)\n  $scope.bestMLP = newGen[bestMLP];\n}\n\nvar randomPurging = function(oldMlp){\n\n  var newMlp = purgeTheWeak(oldMlp);\n\n  var difference = (oldMlp.length - newMlp.length);\n\n  procreate(newMlp,difference);\n\n  return newMlp;\n\n}\n\nvar procreate = function(population,n){\n\n  for(var i = 0; i<n; i++){\n    var temp = createNewRandMLP();\n    population.push(temp);\n  }\n\n  return population;\n\n\n}\n\nvar purgeTheWeak = function(population){\n\n\n  var errorStats = errorChecking(population);\n  var threshold = errorStats.avError;\n  var newPopulation = [];\n\n  for (var i = 0; i < population.length; i++) {\n    if(Math.abs(population[i].error) < threshold){\n      newPopulation.push(population[i]);\n    }\n  };\n\n  return newPopulation;\n\n\n}\n\n});"
  ]
}